/* ================================== MIXINS ================================= */
/* Rounded corners - accepts single numbers and combinations: 5px or 5px 0px 0px 5px */
@mixin borderRadius($radius: 5px) {
  -moz-border-radius: $radius;
  -webkit-border-radius: $radius;
  border-radius: $radius;
}
/* Two color gradient with even color distribution */
@mixin gradient($color1, $color2) {
  background: $color1;
  /* Old browsers */
  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$color1), color-stop(100%,$color2));
  /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(top, $color1 0%,$color2 100%);
  /* Chrome10+,Safari5.1+ */
  background: -o-linear-gradient(top, $color1 0%,$color2 100%);
  /* Opera 11.10+ */
  background: -ms-linear-gradient(top, $color1 0%,$color2 100%);
  /* IE10+ */
  background: linear-gradient(to bottom, $color1 0%,$color2 100%);
  /* W3C */
}
/* Two color gradient with glossy look */
@mixin gloss($color1, $color2) {
  background: $color2;
  background: -moz-linear-gradient(top, $color1 0%, $color1 48%, $color2 52%, $color2 100%);
  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$color1), color-stop(48%,$color1), color-stop(52%,$color2), color-stop(100%,$color2));
  background: -webkit-linear-gradient(top, $color1 0%,$color1 48%,$color2 52%,$color2 100%);
  background: -o-linear-gradient(top, $color1 0%,$color1 48%,$color2 52%,$color2 100%);
  background: -ms-linear-gradient(top, $color1 0%,$color1 48%,$color2 52%,$color2 100%);
  background: linear-gradient(to bottom, $color1 0%,$color1 48%,$color2 52%,$color2 100%);
}
/* Creates a box shadow around the element */
@mixin boxShadow($inset: 0 1px 0px, $insetColor: #fff, $insetAlpha: 0.2, $outset: 0 1px 2px, $outsetColor: #000, $outsetAlpha: 0.05) {
  -webkit-box-shadow: inset $inset rgba($insetColor, $insetAlpha), $outset rgba($outsetColor, $outsetAlpha);
  -moz-box-shadow: inset $inset rgba($insetColor, $insetAlpha), $outset rgba($outsetColor, $outsetAlpha);
  box-shadow: inset $inset rgba($insetColor, $insetAlpha), $outset rgba($outsetColor, $outsetAlpha);
}
@mixin boxShadow2($horizontal: 1px, $vertical: 2px, $blur: 2px, $color: #333) {
  -webkit-box-shadow: $horizontal $vertical $blur $color;
  -moz-box-shadow: $horizontal $vertical $blur $color;
  box-shadow: $horizontal $vertical $blur $color;
}
/* CSS transitions */
@mixin transition($element: all, $length: 0.5s, $type: ease-in-out) {
  -webkit-transition: $element $length $type;
  -moz-transition: $element $length $type;
  transition: $element $length $type;
}
/* Text indent to hide words */
@mixin textIndent {
  text-indent: -2000px;
  overflow: hidden;
  white-space: nowrap;
}
/* Creates a custom bullet - requires parent element to have position:relative */
@mixin customBullet($color: #000, $top: 0, $left: 0, $font-size: 12px) {
  &:before {
    content: "â€¢";
    color: $color;
    dispay: block;
    position: absolute;
    top: $top;
    left: $left;
    font-size: $font-size;
  }
}
/* The width and height properties include the padding and border, but not the margin. */
@mixin boxSizing($type: border-box) {
  -webkit-box-sizing: $type;
  /* Safari/Chrome, other WebKit */
  -moz-box-sizing: $type;
  /* Firefox, other Gecko */
  box-sizing: $type;
  /* Opera/IE 8+ */
}
/* Adds a clearfix after to the element for clearing floats */
@mixin clearfix {
  &:after {
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
  }
}
/* Adds the ability to use inline-block on elements and have them auto-justify. */
@mixin justifyItems($width: 32.666%) {
  /* the number is set to 32.666% due to Safari subpixel rendering issues with 33% */
  text-align: justify;

  &:after {
    width: 100%;
    display: inline-block;
    content: ".";
    visibility: hidden;
  }

  li {
    width: $width;
    display: inline-block;
    vertical-align: top;
    text-align: left;
  }
}
/* REM Font Size with Pixel Fallback.*/
@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}
@function ptToPx($ptSize: 1) {
  //Converts to Rems
  $pxValue: round($ptSize * 1.333333);
  @return #{$pxValue}rem;
}
@mixin ptFontSize($size) {
  font-size: $size + 0px; //px Fallback
  font-size: ptToPx($size / 16); //rem output
}